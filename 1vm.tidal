cps 0.8

-- lazy helpers
let sw f = sometimes(within(0, 0.5) f)
    sw' d h f = sometimes(within (d, h) f)
    ---
    ch :: Int -> [Int] -> Pattern Int ; ch n chord = listToPat [ch + n | ch <- chord]
    --- q $ note (cho 48 "1 [~ 1] 1 1 " [0, 3, 7, 5])
    cho n pat chord = preplace(1,1) pat $ listToPat [ch + n | ch <- chord]
    --- q $ note (cho' 48 3 "1 [~ 1] 1 1 " [0, 3, 7, 5])
    cho' n off pat chord = cho (n+off) pat chord
    --- q $ slowcho [47, 45, 42] "[1 !] 1 1 1" [0, 3, 0, 3]
    slowcho nlist pat chord = slowcat[note (cho n pat chord) | n <- nlist]
    --- q $ slowcho' [47, 45, 42] 3 "[1 !] 1 1 1" [0, 3, 0, 3]
    slowcho' nlist off pat chord = slowcat[note (cho' n off pat chord) | n <- nlist]
    --  q $ slowcat[note (cho 60 "1 1 1" (rotate i [0,3,7,10])) | i <- [0..3]]
    rotate :: Int -> [a] -> [a]
    rotate _ [] = []
    rotate n xs = zipWith const (drop n (cycle xs)) xs
    -- q $ chrot [51, 48] "1 1 1 1" [0, 3, 5, 7] 3
    chrot nlist pat chord = slowcat[slowcho nlist pat (rotate i chord) | i <- [0..((length chord)-1)]]




b $ every 13 (chop 2) . every 3 (stut 2 0 0.25) $ stack[
drum "bd [sn [~ sn]]",
drum "[ch [~ ch]] oh/2",
drum "~ cp ~ [~ cp]"
] # stt "0" # std "0.1" # dch "0.5" # doh "0.5"

m1 $ stut 2 0 0.75 $ stack[
e 3 8 $ chrot [48] "1" [0,0,0,3,7]
] # dur "0.25" # vel (scale 0.45 0.5 sine1) # sustainpedal (scale 0 0.65 sine1)

m2 $ every 6 (stut 2 0 0.75) . every 3 (sometimes(# chrot [84] "[1(5,8),1(3,8)]" [0,0,0,3,7])) $ every 5 ( slow 2 . (# dur "1") ) $ stack[
chrot [72] "[1(5,8),1(3,8)]" [0,0,0,3,7]
] # vel "0.25" # dur "0.5"

hush -- :o0o0o0
